use clap::{arg, command, Parser};
use std::io::Write;
use std::path::Path;
use std::{env, fs};

/// Simple program to generate a static index.html file at a specified path
#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    /// Output path for the generated static site
    #[arg(short, long)]
    output: String,
}

fn main() {
    // Parse the command-line arguments
    let args = Args::parse();

    // Define the directory and file paths
    let out_dir = &args.output;
    let index_path = &format!("{}/index.html", out_dir);

    // Use the GitHub token
    let _github_token = env::var("GITHUB_TOKEN").expect("No GitHub token in env");

    // Create the directory if it doesn't exist
    if !Path::new(out_dir).exists() {
        fs::create_dir_all(out_dir).expect("Failed to create output directory");
    }

    // Define the content for the index.html
    let html_content = r#"
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>repo-scraper</title>
    </head>
    <body>
        <h1>Sup, I changed this text because I wanted to see if it updates correctly ðŸ˜Ž</h1>
        <p>This is a test site generated by a Rust program.</p>
    </body>
    </html>
    "#;

    // Write the content to the index.html file
    let mut file = fs::File::create(index_path).expect("Failed to create index.html file");
    file.write_all(html_content.as_bytes())
        .expect("Failed to write to index.html file");

    println!("Static site generated successfully at {}", index_path);

    // Define the directory and file paths
    let dir_path = "./.cache";
    let file_path = &format!("{}/output.txt", dir_path);

    // Check if the directory exists, and create it if it doesn't
    if !Path::new(dir_path).exists() {
        fs::create_dir(dir_path).expect("Failed to create .cache directory");
    }

    // Check if the file already exists
    if Path::new(file_path).exists() {
        println!("File already exists: {file_path}");
    } else {
        // Create and write to the file
        let mut file = fs::File::create(file_path).expect("Failed to create output.txt file");
        file.write_all(b"Hello, this is a sample text.")
            .expect("Failed to write to file");
        println!("File written to {file_path}");
    }
}
